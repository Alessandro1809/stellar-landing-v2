---
import Button from "./Button.astro";
import Toast from "./Toast.astro";

interface Props {
    isOpen?: boolean;
    buttonId: string;
}

const { 
    isOpen = false,
    buttonId
} = Astro.props;

// Calcular fechas mínima y máxima permitidas
const today = new Date();
const minDate = new Date(today);
minDate.setDate(today.getDate() + 2); // 2 días después de hoy

const formatDateForInput = (date: Date) => {
    return date.toISOString().slice(0, 16); // Formato YYYY-MM-DDTHH:mm
};
---

<Toast />

<!-- Modal -->
<div 
    data-button-id={buttonId}
    class:list={[
        "fixed inset-0 bg-black/50 flex items-center justify-center z-40 transition-opacity duration-300",
        isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
    ]}
>
    <div class="bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-6 w-full max-w-md mx-4 relative">
        <button 
            class="absolute top-4 right-4 text-gray-400 hover:text-white"
            type="button"
            data-close-modal
        >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        <h3 class="text-2xl font-bold text-primary-cyan mb-6">Schedule a Meeting</h3>

        <form class="space-y-6" data-schedule-form>
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Your Name</label>
                <input 
                    type="text" 
                    name="nombre"
                    class="w-full bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-3 text-white focus:outline-none focus:border-primary-yellow"
                    required
                    placeholder="John Doe"
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Your Email</label>
                <input 
                    type="email" 
                    name="email"
                    class="w-full bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-3 text-white focus:outline-none focus:border-primary-yellow"
                    required
                    placeholder="your@email.com"
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Company (Optional)</label>
                <input 
                    type="text" 
                    name="empresa"
                    class="w-full bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-3 text-white focus:outline-none focus:border-primary-yellow"
                    placeholder="Your Company"
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Select Date and Time</label>
                <input 
                    type="datetime-local" 
                    name="meeting-datetime"
                    min={formatDateForInput(minDate)}
                    class="w-full bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-3 text-white focus:outline-none focus:border-primary-yellow"
                    required
                />
                <p class="text-xs text-gray-400 mt-1">Meetings must be scheduled at least 2 days in advance</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Duration</label>
                <div class="grid grid-cols-3 gap-3">
                    {[15, 30, 45].map((duration) => (
                        <label class="relative">
                            <input 
                                type="radio" 
                                name="duration" 
                                value={duration}
                                class="peer sr-only"
                                required
                            />
                            <div class="text-center p-3 border border-primary-yellow/30 rounded-lg cursor-pointer peer-checked:bg-primary-yellow/20 peer-checked:border-primary-yellow hover:bg-white/5">
                                {duration} min
                            </div>
                        </label>
                    ))}
                </div>
            </div>

            <input type="hidden" name="servicio" value="Meeting Request" />
            <input type="hidden" name="asunto" value="New Meeting Request" />

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Message (Optional)</label>
                <textarea 
                    name="mensaje"
                    rows="3"
                    class="w-full bg-theme-deepblue border border-primary-yellow/30 rounded-lg p-3 text-white focus:outline-none focus:border-primary-yellow resize-none"
                    placeholder="Add any additional information..."
                ></textarea>
            </div>

            <div class="flex justify-end gap-3">
                <button 
                    type="button"
                    class="px-6 py-2 border-2 border-primary-yellow text-white hover:bg-white/10 font-semibold rounded-full transition-colors"
                    data-cancel-schedule
                >
                    Cancel
                </button>
                <button 
                    type="submit"
                    class="px-6 py-2 bg-primary-yellow text-theme-deepblue hover:bg-primary-yellow/90 font-semibold rounded-full transition-colors"
                >
                    Schedule Meeting
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    function initScheduleModal() {
        // Seleccionar todos los modales
        const modals = document.querySelectorAll<HTMLElement>('[data-button-id]');
        
        modals.forEach(modal => {
            const closeBtn = modal.querySelector<HTMLButtonElement>('[data-close-modal]');
            const cancelBtn = modal.querySelector<HTMLButtonElement>('[data-cancel-schedule]');
            const form = modal.querySelector<HTMLFormElement>('[data-schedule-form]');
        
            // Close modal function
            const closeModal = () => {
                modal.classList.add('opacity-0', 'pointer-events-none');
                if (form) form.reset();
            };

            // Add event listeners
            closeBtn?.addEventListener('click', closeModal);
            cancelBtn?.addEventListener('click', (e) => {
                e.preventDefault();
                closeModal();
            });

            // Handle form submission
            form?.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(form);
                const datetime = (form.querySelector<HTMLInputElement>('[name="meeting-datetime"]')?.value) || '';
                const duration = (form.querySelector<HTMLInputElement>('input[name="duration"]:checked')?.value) || '';

                // Add meeting details to the message
                const meetingDetails = `
Meeting Details:
Date and Time: ${new Date(datetime).toLocaleString()}
Duration: ${duration} minutes

Additional Information:
${formData.get('mensaje') || 'No additional message provided.'}
                `.trim();

                formData.set('mensaje', meetingDetails);

                try {
                    const response = await fetch('/api/contact', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    if (response.ok) {
                        window.showToast('¡Solicitud de reunión enviada correctamente!', 'success');
                        closeModal();
                    } else {
                        window.showToast(data.message || 'Error al enviar la solicitud de reunión', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    window.showToast('Error al enviar la solicitud de reunión', 'error');
                }
            });
        });
    }

    // Initialize on page load and after navigation
    document.addEventListener('astro:page-load', initScheduleModal);
    // Also initialize immediately in case we're not using navigation
    initScheduleModal();
</script> 