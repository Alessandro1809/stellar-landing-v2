---
interface Props {
    src: string;
    autoplay?: boolean;
    loop?: boolean;
    speed?: number;
    width?: string;
    height?: string;
    class?: string;
    hover?: boolean;
    pauseBetweenLoops?: number; // tiempo en segundos
    mobileOptimized?: boolean;
}

const {
    src,
    autoplay = false,
    loop = true,
    speed = 1,
    width = "100%",
    height = "100%",
    class: className = "",
    hover = false,
    pauseBetweenLoops = 4, // por defecto 4 segundos
    mobileOptimized = true
} = Astro.props;

// Generar un ID único para cada instancia
const uniqueId = `lottie-${Math.random().toString(36).substring(2, 11)}`;
---

<div 
    id={uniqueId}
    class={className}
>
    <lottie-player
        src={src}
        speed={speed}
        style={`width: ${width}; height: ${height};`}
    ></lottie-player>
</div>

<script is:inline define:vars={{ uniqueId, hover, autoplay, loop, pauseBetweenLoops, mobileOptimized }}>
    document.addEventListener('astro:page-load', () => {
        const container = document.getElementById(uniqueId);
        if (!container) return;

        const player = container.querySelector('lottie-player');
        if (!player) return;

        let isPlaying = false;
        let isPaused = false;
        let hoverTimeout;
        let isMobile = window.innerWidth < 768;
        let observer;

        const startAnimation = () => {
            if (!isPlaying && !isPaused) {
                isPlaying = true;
                player.play();
            }
        };

        const pauseAnimation = () => {
            isPlaying = false;
            player.pause();
        };

        const resetAnimation = () => {
            player.seek(0);
            isPaused = false;
            if (!hover || (hover && container.matches(':hover'))) {
                startAnimation();
            }
        };

        const handleComplete = () => {
            if (loop && !hover) {
                isPlaying = false;
                isPaused = true;
                pauseAnimation();
                setTimeout(resetAnimation, pauseBetweenLoops * 1000);
            }
        };

        // Configurar Intersection Observer para optimizar en móviles
        if (mobileOptimized) {
            observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        if (autoplay) startAnimation();
                    } else {
                        pauseAnimation();
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '50px'
            });

            observer.observe(container);
        }

        // Configurar eventos
        player.addEventListener('complete', handleComplete);

        player.addEventListener('ready', () => {
            player.seek(0);
            if (autoplay && (!mobileOptimized || !isMobile)) {
                startAnimation();
            } else {
                pauseAnimation();
            }
        });

        if (hover) {
            container.addEventListener('mouseenter', () => {
                if (hoverTimeout) {
                    clearTimeout(hoverTimeout);
                }
                isPaused = false;
                player.seek(0);
                startAnimation();
            });

            container.addEventListener('mouseleave', () => {
                hoverTimeout = setTimeout(() => {
                    pauseAnimation();
                    player.seek(0);
                }, 100);
            });
        }

        // Limpiar observer al desmontar
        return () => {
            if (observer) {
                observer.disconnect();
            }
        };
    });
</script>

<script>
    import "@lottiefiles/lottie-player";
</script> 